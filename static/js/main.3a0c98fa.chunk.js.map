{"version":3,"sources":["components/Carousel/Carousel.tsx","components/CarouselInputs/CarouselInputs.tsx","App.tsx","index.tsx"],"names":["Carousel","image","settings","step","frameSize","itemWidth","animationDuration","infinite","imgQuantity","length","useState","translateX","setTranslateX","nextBtnDisable","setNextBtnDisable","prevBtnDisable","setPrevBtnDisable","index","setIndex","newImages","setNewImages","newTranslateX","className","style","width","transform","transition","map","img","src","alt","type","classNames","disabled","onClick","imageCopy1","slice","imageCopy2","scrollPrev","stepQuantity","scrollNext","CarouselInputs","change","margin","name","min","max","value","onChange","e","App","state","images","setting","updateValues","keyName","currentTarget","checked","setState","newSetting","this","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a0c98fa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport classNames from 'classnames';\nimport { Setting } from '../../type/type';\n\ntype Props = {\n  image: string[],\n  settings: Setting,\n};\n\nconst Carousel: React.FC<Props> = ({ image, settings }) => {\n  const {\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = settings;\n\n  const imgQuantity = image.length;\n  const [translateX, setTranslateX] = useState(0);\n  const [nextBtnDisable, setNextBtnDisable] = useState(false);\n  const [prevBtnDisable, setPrevBtnDisable] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [newImages, setNewImages] = useState([...image]);\n  let newTranslateX = 0;\n\n  const scrollNext = () => {\n    newTranslateX = translateX - itemWidth * step;\n    const stepQuantity = (imgQuantity - frameSize) * -itemWidth;\n\n    setIndex(index + step);\n\n    if (!infinite) {\n      if (newTranslateX <= stepQuantity) {\n        newTranslateX = stepQuantity;\n\n        setNextBtnDisable(true);\n        setPrevBtnDisable(false);\n        setTranslateX(newTranslateX);\n        setIndex(index + (imgQuantity - (index + frameSize)));\n      }\n\n      setPrevBtnDisable(false);\n      setTranslateX(newTranslateX);\n    } else {\n      if (translateX === 0 - (itemWidth * step * 2)) {\n        const imageCopy1 = newImages.slice(index + step - imgQuantity);\n        const imageCopy2 = newImages.slice(0, index + step);\n\n        setNewImages([...imageCopy1, ...imageCopy2]);\n\n        newTranslateX = 0;\n        setIndex(0);\n      } else {\n        newTranslateX = translateX - itemWidth * step;\n      }\n\n      setTranslateX(newTranslateX);\n      setNextBtnDisable(false);\n      setPrevBtnDisable(false);\n    }\n  };\n\n  const scrollPrev = () => {\n    newTranslateX = translateX + itemWidth * step;\n\n    setIndex(index - step);\n\n    if (index === 0) {\n      setIndex(index + step);\n    }\n\n    if (!infinite) {\n      if (newTranslateX >= 0) {\n        newTranslateX = 0;\n\n        setNextBtnDisable(false);\n        setPrevBtnDisable(true);\n        setTranslateX(0);\n        setIndex(0);\n      }\n\n      setNextBtnDisable(false);\n      setTranslateX(newTranslateX);\n    } else {\n      if (translateX === 0) {\n        newTranslateX = 0 - (itemWidth * step * 2) - itemWidth;\n\n        setIndex(0);\n      } else if (translateX > 0 - (itemWidth * step)) {\n        const imageCopy1 = newImages.slice(-(imgQuantity + (translateX / itemWidth)));\n        const imageCopy2 = newImages.slice(0, -(translateX / itemWidth));\n\n        setNewImages([...imageCopy1, ...imageCopy2]);\n        newTranslateX = 0 - (itemWidth * step * 2) - itemWidth;\n        setIndex(0);\n      } else {\n        newTranslateX = translateX + itemWidth * step;\n      }\n\n      setNextBtnDisable(false);\n      setPrevBtnDisable(false);\n      setTranslateX(newTranslateX);\n    }\n  };\n\n  if ((itemWidth * frameSize) - translateX > (itemWidth * imgQuantity)) {\n    newTranslateX = translateX + itemWidth;\n\n    setTranslateX(newTranslateX);\n  }\n\n  if (translateX !== 0 && index !== 0 && translateX % itemWidth !== 0) {\n    setTranslateX(0);\n    setIndex(0);\n  }\n\n  return (\n    <div\n      className=\"Carousel\"\n    >\n      <div\n        className=\"Carousel__wrap\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${translateX}px)`,\n            transition: `${animationDuration}ms`,\n          }}\n        >\n          {newImages.map(img => (\n            <li\n              key={img}\n              className=\"Carousel_item\"\n            >\n              <img\n                src={img}\n                alt=\"smile\"\n                className=\"Carousel__img\"\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div\n        className=\"buttons\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        <button\n          type=\"button\"\n          className={classNames(\n            'buttons__btn',\n            'buttons__btn--prev',\n          )}\n          disabled={prevBtnDisable}\n          onClick={() => {\n            scrollPrev();\n          }}\n        >\n          <i className=\"arrow arrow--left\" />\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'buttons__btn',\n            'buttons__btn--next',\n          )}\n          disabled={nextBtnDisable}\n          onClick={() => {\n            scrollNext();\n          }}\n        >\n          Next\n          <i className=\"arrow arrow--right\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './CarouselInputs.scss';\nimport { Setting } from '../../type/type';\n\ntype Props = {\n  settings: Setting,\n  change: (e: React.ChangeEvent<HTMLInputElement>, keyName: keyof Setting) => void,\n  length: number,\n};\n\nconst CarouselInputs: React.FC<Props> = ({ settings, change, length }) => {\n  const {\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n  } = settings;\n\n  return (\n    <div className=\"inputs\">\n      <h2\n        style={{\n          margin: '10px auto',\n        }}\n      >\n        Change parameters here:\n      </h2>\n\n      <div className=\"inputs__item\">\n        <span>\n          Scroll steps (from 1 to\n          {` ${length}`}\n          )\n        </span>\n\n        <div\n          className=\"inputs__input\"\n        >\n          <input\n            type=\"range\"\n            name=\"step\"\n            min=\"1\"\n            max={`${length}`}\n            value={`${step}`}\n            onChange={(e) => change(e, 'step')}\n          />\n\n          <span>\n            {step}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Quantity of images in box (from 1 to\n          {` ${length}`}\n          )\n        </span>\n\n        <div\n          className=\"inputs__input\"\n        >\n          <input\n            type=\"range\"\n            name=\"frameSize\"\n            min=\"1\"\n            max={`${length}`}\n            value={`${frameSize}`}\n            onChange={(e) => change(e, 'frameSize')}\n          />\n\n          <span>\n            {frameSize}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Image size (from 50 to 360, step 10)\n        </span>\n\n        <div\n          className=\"inputs__input\"\n        >\n          <input\n            type=\"range\"\n            name=\"itemWidth\"\n            min=\"50\"\n            max=\"360\"\n            step=\"10\"\n            value={`${itemWidth}`}\n            onChange={(e) => change(e, 'itemWidth')}\n          />\n\n          <span>\n            {itemWidth}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Animation speed (from 100 to 2000, step 100)\n        </span>\n\n        <div\n          className=\"inputs__input\"\n        >\n          <input\n            type=\"range\"\n            name=\"animationDuration\"\n            min=\"100\"\n            max=\"2000\"\n            step=\"100\"\n            value={`${animationDuration}`}\n            onChange={(e) => change(e, 'animationDuration')}\n          />\n\n          <span>\n            {animationDuration}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Do you want Infinity scroll?\n        </span>\n\n        <label\n          className=\"inputs__checkbox\"\n        >\n          <input\n            type=\"checkbox\"\n            name=\"infinite\"\n            onChange={(e) => change(e, 'infinite')}\n          />\n          Yes\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default CarouselInputs;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\nimport CarouselInputs from './components/CarouselInputs/CarouselInputs';\nimport { Setting } from './type/type';\n\ninterface State {\n  images: string[],\n  setting: Setting,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    setting: {\n      step: 3,\n      frameSize: 3,\n      itemWidth: 50,\n      animationDuration: 1000,\n      infinite: false,\n    },\n  };\n\n  updateValues = (e: React.ChangeEvent<HTMLInputElement>, keyName: keyof Setting): void => {\n    const { value, checked } = e.currentTarget;\n\n    this.setState(({ setting }) => {\n      const newSetting = { ...setting };\n\n      if (keyName === 'infinite') {\n        newSetting[keyName] = checked;\n      }\n\n      if (keyName !== 'infinite') {\n        newSetting[keyName] = +value;\n      }\n\n      return { setting: newSetting };\n    });\n  };\n\n  render() {\n    const { images, setting } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          image={images}\n          settings={setting}\n        />\n\n        <CarouselInputs\n          settings={setting}\n          change={(e, key) => {\n            this.updateValues(e, key);\n          }}\n          length={images.length}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}