{"version":3,"sources":["components/Carousel/Carousel.tsx","components/CarouselInputs/CarouselInputs.tsx","App.tsx","index.tsx"],"names":["Carousel","image","settings","step","frameSize","itemWidth","animationDuration","infinite","imgQuantity","length","useState","translateX","setTranslateX","nextBtnDisable","setNextBtnDisable","prevBtnDisable","setPrevBtnDisable","index","setIndex","newImages","setNewImages","className","style","width","transform","transition","map","img","src","alt","type","classNames","disabled","onClick","newTranslateX","difference","imageCopy1","slice","imageCopy2","scrollPrev","stepQuantity","scrollNext","CarouselInputs","change","name","min","max","value","onChange","e","App","state","images","setting","updateValues","keyName","newValue","currentTarget","setState","newSetting","this","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba7ccdfe.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport classNames from 'classnames';\nimport { Setting } from '../../type/type';\n\ntype Props = {\n  image: string[],\n  settings: Setting,\n};\n\nconst Carousel: React.FC<Props> = ({ image, settings }) => {\n  const {\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = settings;\n\n  const imgQuantity = image.length;\n  const [translateX, setTranslateX] = useState(0);\n  const [nextBtnDisable, setNextBtnDisable] = useState(false);\n  const [prevBtnDisable, setPrevBtnDisable] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [newImages, setNewImages] = useState([...image]);\n\n  const scrollNext = () => {\n    let newTranslateX = translateX - itemWidth * step;\n    const stepQuantity = (imgQuantity - frameSize) * -itemWidth;\n\n    setIndex(index + step);\n\n    if (!infinite) {\n      if (newTranslateX <= stepQuantity) {\n        newTranslateX = stepQuantity;\n\n        setNextBtnDisable(true);\n        setPrevBtnDisable(false);\n        setTranslateX(newTranslateX);\n\n        return;\n      }\n\n      setPrevBtnDisable(false);\n      setTranslateX(newTranslateX);\n    } else {\n      const difference = step - (newImages.length - index);\n\n      const imageCopy1 = newImages.slice(difference);\n      const imageCopy2 = newImages.slice(0, difference);\n\n      setNewImages([...imageCopy1, ...imageCopy2]);\n      setNextBtnDisable(false);\n      setPrevBtnDisable(false);\n      setTranslateX(0);\n      setIndex(0);\n    }\n  };\n\n  const scrollPrev = () => {\n    let newTranslateX = translateX + itemWidth * step;\n\n    if (!infinite) {\n      if (newTranslateX >= 0) {\n        newTranslateX = 0;\n\n        setNextBtnDisable(false);\n        setPrevBtnDisable(true);\n        setTranslateX(0);\n      }\n\n      setNextBtnDisable(false);\n      setTranslateX(newTranslateX);\n    } else {\n      const difference = newImages.length - step;\n\n      const imageCopy1 = newImages.slice(difference);\n      const imageCopy2 = newImages.slice(0, difference);\n\n      setNewImages([...imageCopy1, ...imageCopy2]);\n      setNextBtnDisable(false);\n      setPrevBtnDisable(false);\n      setTranslateX(0);\n      setIndex(0);\n    }\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n    >\n      <div\n        className=\"Carousel__wrap\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(${translateX}px)`,\n            transition: `${animationDuration}ms`,\n          }}\n        >\n          {newImages.map(img => (\n            <li\n              key={img}\n              className=\"Carousel_item\"\n            >\n              <img\n                src={img}\n                alt=\"smile\"\n                className=\"Carousel__img\"\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div\n        className=\"buttons\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        <button\n          type=\"button\"\n          className={classNames(\n            'buttons__btn',\n            'buttons__btn--prev',\n          )}\n          disabled={prevBtnDisable}\n          onClick={() => {\n            scrollPrev();\n          }}\n        >\n          <i className=\"arrow arrow--left\" />\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'buttons__btn',\n            'buttons__btn--next',\n          )}\n          disabled={nextBtnDisable}\n          onClick={() => {\n            scrollNext();\n          }}\n        >\n          Next\n          <i className=\"arrow arrow--right\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './CarouselInputs.scss';\nimport { Setting } from '../../type/type';\n\ntype Props = {\n  settings: Setting,\n  change: (e: React.ChangeEvent<HTMLInputElement>, keyName: keyof Setting) => void,\n  length: number,\n};\n\nconst CarouselInputs: React.FC<Props> = ({ settings, change, length }) => {\n  const {\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = settings;\n\n  return (\n    <div className=\"inputs\">\n      <h2>\n        Change parameters here:\n      </h2>\n\n      <div className=\"inputs__item\">\n        <span>\n          Scroll steps (from 1 to\n          {` ${length}`}\n          )\n        </span>\n        <input\n          type=\"number\"\n          name=\"step\"\n          className=\"inputs__input\"\n          min=\"1\"\n          max={`${length}`}\n          value={`${step}`}\n          onChange={(e) => change(e, 'step')}\n        />\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Quantity of images in box (from 1 to\n          {` ${length}`}\n          )\n        </span>\n        <input\n          type=\"number\"\n          name=\"frameSize\"\n          className=\"inputs__input\"\n          min=\"1\"\n          max={`${length}`}\n          value={`${frameSize}`}\n          onChange={(e) => change(e, 'frameSize')}\n        />\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Image size (from 50 to 360, step 10)\n        </span>\n        <input\n          type=\"number\"\n          name=\"itemWidth\"\n          className=\"inputs__input\"\n          min=\"50\"\n          max=\"360\"\n          step=\"10\"\n          value={`${itemWidth}`}\n          onChange={(e) => change(e, 'itemWidth')}\n        />\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Animation speed (from 100 to 2000, step 100)\n        </span>\n        <input\n          type=\"number\"\n          name=\"animationDuration\"\n          className=\"inputs__input\"\n          min=\"100\"\n          max=\"2000\"\n          step=\"100\"\n          value={`${infinite ? 0 : animationDuration}`}\n          onChange={(e) => change(e, 'animationDuration')}\n        />\n      </div>\n\n      <div className=\"inputs__item\">\n        <span>\n          Infinity scroll or not (0 = No, 1 = Yes)\n        </span>\n        <input\n          type=\"number\"\n          name=\"infinite\"\n          className=\"inputs__input\"\n          min=\"0\"\n          max=\"1\"\n          value={`${+infinite}`}\n          onChange={(e) => change(e, 'infinite')}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CarouselInputs;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\nimport CarouselInputs from './components/CarouselInputs/CarouselInputs';\nimport { Setting } from './type/type';\n\ninterface State {\n  images: string[],\n  setting: Setting,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    setting: {\n      step: 3,\n      frameSize: 3,\n      itemWidth: 130,\n      animationDuration: 1000,\n      infinite: false,\n    },\n  };\n\n  updateValues = (e: React.ChangeEvent<HTMLInputElement>, keyName: keyof Setting): void => {\n    const newValue: number = +e.currentTarget.value;\n\n    this.setState(({ setting }) => {\n      const newSetting = { ...setting };\n\n      if (keyName === 'infinite') {\n        if (newValue === 0) {\n          newSetting[keyName] = false;\n        } else {\n          newSetting[keyName] = true;\n        }\n      }\n\n      if (keyName !== 'infinite') {\n        newSetting[keyName] = newValue;\n      }\n\n      return { setting: newSetting };\n    });\n  };\n\n  render() {\n    const { images, setting } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          image={images}\n          settings={setting}\n        />\n\n        <CarouselInputs\n          settings={setting}\n          change={(e, key) => {\n            this.updateValues(e, key);\n          }}\n          length={images.length}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}